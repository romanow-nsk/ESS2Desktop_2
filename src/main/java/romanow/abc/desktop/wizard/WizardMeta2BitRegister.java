/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop.wizard;


import romanow.abc.core.UniException;
import romanow.abc.core.constants.ConstValue;
import romanow.abc.core.constants.Values;
import romanow.abc.core.entity.metadata.*;
import romanow.abc.desktop.I_Button;
import romanow.abc.desktop.OK;

import java.awt.*;
import java.util.ArrayList;

/**
 *
 * @author romanow0
 */
public class WizardMeta2BitRegister extends WizardMeta2Register {
    private boolean busy = false;
    private Meta2BitRegister register;
    private WizardMetaEntitySelector selector;
    private Choice choice;
    private ArrayList<Meta2Bit> bits;
    private ArrayList<ConstValue> bitsTypes;
    public WizardMeta2BitRegister() {
        initComponents();
        }
    public void openForm(WizardBaseView parentView0, Meta2Entity entity0){
        super.openForm(parentView0,entity0);
        resizeHeight(300);
        busy = true;
        register = (Meta2BitRegister)entity;
        selector = new WizardMetaEntitySelector("Биты", Values.MEBit,callBack);
        selector.setBounds(10,130,750,40);
        choice = selector.getList();
        getContentPane().add(selector);
        bits = register.getBits().getList();
        Inline61850.setSelected(register.isInline61850());
        bitsTypes = Values.constMap().getGroupList("BitRegType");
        BitsType.removeAll();
        for(ConstValue vv : bitsTypes)
            BitsType.add(vv.title());
        for(int i=0; i<bitsTypes.size(); i++)
            if(bitsTypes.get(i).value()==register.getBitRegType())
                BitsType.select(i);
        refreshList();
        busy=false;
        }

    public void refreshList(){
        choice.removeAll();
        for(Meta2Entity entity : bits){
            choice.add(entity.getFullTitle());
            }
        }

    private I_WizardEntitySelector callBack = new I_WizardEntitySelector() {
        @Override
        public void onEdit(int type, int idx) {
            String ss = openWizardByType(bits.get(idx));
            if (ss!=null)
                System.out.println(ss);
            }
        @Override
        public void onRemove(int type, int idx) {
            final String title = bits.get(idx).getTitle();
            new OK(300, 300, "Удалить " + title, new I_Button() {
                @Override
                public void onPush() {
                    bits.remove(idx);
                    refreshList();
                    back.onEnter("Удален: "+title);
                    }
                });
            }
        @Override
        public void onAdd(int type) {
            try {
                Meta2Bit entity = (Meta2Bit) Values.createEntityByType("MetaElem",type,"romanow.abc.core.entity.metadata");
                bits.add(entity);
                refreshList();
                String ss = openWizardByType(entity);
                if (ss!=null)
                    System.out.println(ss);
                } catch (UniException e) {
                    System.out.println(e.toString());
                    }
            }
        @Override
        public void onSelect(int type, int idx) {}
    };
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        BitsType = new java.awt.Choice();
        jLabel1 = new javax.swing.JLabel();
        SaveBitsType = new javax.swing.JButton();
        Inline61850 = new javax.swing.JCheckBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(10, 120, 560, 3);
        getContentPane().add(BitsType);
        BitsType.setBounds(120, 180, 160, 25);

        jLabel1.setText("Тип битов");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(20, 185, 90, 16);

        SaveBitsType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/save.png"))); // NOI18N
        SaveBitsType.setBorderPainted(false);
        SaveBitsType.setContentAreaFilled(false);
        SaveBitsType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBitsTypeActionPerformed(evt);
            }
        });
        getContentPane().add(SaveBitsType);
        SaveBitsType.setBounds(290, 175, 30, 30);

        Inline61850.setText("61850 inline");
        Inline61850.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Inline61850ItemStateChanged(evt);
            }
        });
        getContentPane().add(Inline61850);
        Inline61850.setBounds(640, 65, 100, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeForm();
    }//GEN-LAST:event_formWindowClosing

    private void SaveBitsTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBitsTypeActionPerformed
        ConstValue value = bitsTypes.get(BitsType.getSelectedIndex());
        register.setBitRegType(value.value());
        back.onEnter("Изменено bitRegType: "+value.title());
    }//GEN-LAST:event_SaveBitsTypeActionPerformed

    private void Inline61850ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Inline61850ItemStateChanged
        if (busy)
            return;
        register.setInline61850(Inline61850.isSelected());
        back.onEnter("Изменено 61850 Inline="+Inline61850.isSelected());
    }//GEN-LAST:event_Inline61850ItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Choice BitsType;
    private javax.swing.JCheckBox Inline61850;
    private javax.swing.JButton SaveBitsType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
