/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop.wizard;


import romanow.abc.core.constants.ConstValue;
import romanow.abc.core.constants.Values;
import romanow.abc.core.entity.metadata.*;

import java.util.ArrayList;

/**
 *
 * @author romanow0
 */
public class WizardMeta2Bit extends WizardBaseView {
    /**
     * Creates new form xxx
     */
    private Meta2Bit bit;
    private ArrayList<ConstValue> bitType;
    public WizardMeta2Bit() {
        initComponents();
        }
    public void openForm(WizardBaseView parentView0, Meta2Entity entity0){
        super.openForm(parentView0,entity0);
        setSize(800,250);
        bit = (Meta2Bit) entity;
        bitType = Values.constMap().getGroupList("BitType");
        BitType.removeAll();
        for(ConstValue vv : bitType)
            BitType.add(vv.title());
        BitType.select(bit.getBitType());
        DataReg.setText(""+bit.getDataRegNum());
        SettingsReg.setText(""+bit.getSettingRegNum());
        FailBy0.setSelected(bit.isInvert());
        Control.setSelected(bit.isControl());
        BitNum.setText(""+bit.getBitNum());
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        BitType = new java.awt.Choice();
        jLabel1 = new javax.swing.JLabel();
        SaveBitType = new javax.swing.JButton();
        DataReg = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        BitNum = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        SettingsReg = new javax.swing.JTextField();
        FailBy0 = new javax.swing.JCheckBox();
        Control = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(jSeparator1);
        jSeparator1.setBounds(10, 82, 560, 2);
        getContentPane().add(BitType);
        BitType.setBounds(380, 100, 160, 25);

        jLabel1.setText("Тип бита");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(310, 105, 60, 14);

        SaveBitType.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/save.png"))); // NOI18N
        SaveBitType.setBorderPainted(false);
        SaveBitType.setContentAreaFilled(false);
        SaveBitType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveBitTypeActionPerformed(evt);
            }
        });
        getContentPane().add(SaveBitType);
        SaveBitType.setBounds(550, 95, 30, 30);

        DataReg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                DataRegKeyPressed(evt);
            }
        });
        getContentPane().add(DataReg);
        DataReg.setBounds(170, 130, 59, 25);

        jLabel2.setText("Связанный рег.данных");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(20, 135, 140, 14);

        BitNum.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                BitNumKeyPressed(evt);
            }
        });
        getContentPane().add(BitNum);
        BitNum.setBounds(170, 100, 59, 25);

        jLabel3.setText("Номер бита");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(20, 105, 80, 14);

        jLabel4.setText("Связанный рег.уставки");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(240, 135, 140, 14);

        SettingsReg.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                SettingsRegKeyPressed(evt);
            }
        });
        getContentPane().add(SettingsReg);
        SettingsReg.setBounds(380, 130, 59, 25);

        FailBy0.setText("Авария при 0");
        FailBy0.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FailBy0ItemStateChanged(evt);
            }
        });
        getContentPane().add(FailBy0);
        FailBy0.setBounds(240, 160, 180, 23);

        Control.setText("Состояние/управление");
        Control.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ControlItemStateChanged(evt);
            }
        });
        getContentPane().add(Control);
        Control.setBounds(20, 160, 180, 23);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeForm();
    }//GEN-LAST:event_formWindowClosing

    private void SaveBitTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveBitTypeActionPerformed
        ConstValue value = bitType.get(BitType.getSelectedIndex());
        bit.setBitType(value.value());
        back.onEnter("Изменено bitType: "+value.title());
    }//GEN-LAST:event_SaveBitTypeActionPerformed

    private void ControlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ControlItemStateChanged
        bit.setControl(Control.isSelected());
        back.onEnter("Изменено control: "+bit.isControl());
    }//GEN-LAST:event_ControlItemStateChanged

    private void FailBy0ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FailBy0ItemStateChanged
        bit.setInvert(FailBy0.isSelected());
        back.onEnter("Изменено invert: "+bit.isControl());

    }//GEN-LAST:event_FailBy0ItemStateChanged

    private void DataRegKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DataRegKeyPressed
        if(evt.getKeyCode()!=10) return;
        int xx=0;
        try {
            xx = Integer.parseInt(DataReg.getText());
            bit.setDataRegNum(xx);
            if (evt!=null)
                main.viewUpdate(evt,true);
            back.onEnter("Изменено dataRegNum: "+bit.getDataRegNum());
        } catch (Exception ee){
            System.out.println("Ошибка целого: "+DataReg.getText());
            if (evt!=null)
                main.viewUpdate(evt,false);
        }
    }//GEN-LAST:event_DataRegKeyPressed

    private void SettingsRegKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SettingsRegKeyPressed
        if(evt.getKeyCode()!=10) return;
        int xx=0;
        try {
            xx = Integer.parseInt(SettingsReg.getText());
            bit.setSettingRegNum(xx);
            if (evt!=null)
                main.viewUpdate(evt,true);
            back.onEnter("Изменено settingRegNum: "+bit.getSettingRegNum());
        } catch (Exception ee){
            System.out.println("Ошибка целого: "+SettingsReg.getText());
            if (evt!=null)
                main.viewUpdate(evt,false);
        }

    }//GEN-LAST:event_SettingsRegKeyPressed

    private void BitNumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_BitNumKeyPressed
        if(evt.getKeyCode()!=10) return;
        int xx=0;
        try {
            xx = Integer.parseInt(BitNum.getText());
            bit.setBitNum(xx);
            if (evt!=null)
                main.viewUpdate(evt,true);
            back.onEnter("Изменено bitNum: "+bit.getBitNum());
        } catch (Exception ee){
            System.out.println("Ошибка целого: "+BitNum.getText());
            if (evt!=null)
                main.viewUpdate(evt,false);
        }

    }//GEN-LAST:event_BitNumKeyPressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BitNum;
    private java.awt.Choice BitType;
    private javax.swing.JCheckBox Control;
    private javax.swing.JTextField DataReg;
    private javax.swing.JCheckBox FailBy0;
    private javax.swing.JButton SaveBitType;
    private javax.swing.JTextField SettingsReg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
