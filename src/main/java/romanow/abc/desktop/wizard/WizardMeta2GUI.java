/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop.wizard;


import romanow.abc.core.entity.metadata.Meta2Entity;
import romanow.abc.core.entity.metadata.Meta2GUIForm;
import romanow.abc.core.entity.metadata.view.Meta2GUI;
import romanow.abc.desktop.*;

import java.awt.*;

import static romanow.abc.desktop.BasePanel.EventRuntimeSelected;

/**
 *
 * @author romanow0
 */
public class WizardMeta2GUI extends WizardBaseView {
    private boolean busy=false;
    private Meta2GUI elem;
    I_Value<String> baseBack;
    public WizardMeta2GUI() {
        initComponents();
        }
    public void openForm(WizardBaseView parentView0, Meta2Entity entity0){
        super.openForm(parentView0,entity0);
        busy = true;
        setSize(950,250);
        RepaintEtOnce.setSelected(true);
        elem = (Meta2GUI) entity;
        X.setText(""+elem.getX());
        Y.setText(""+elem.getY());
        W.setText(""+elem.getDx());
        H.setText(""+elem.getH());
        CommonColor.setSelected(elem.isCommonColor());
        FontSize.setText(""+elem.getFontSize());
        StringSize.setText(""+elem.getStringSize());
        ColorVal.setText(""+String.format("%06x",elem.getColor()));
        ElemColor.setBackground(new Color(elem.getColor()));
        Bold.setSelected(elem.isBold());
        OnCenter.setSelected(elem.isOnCenter());
        OnRight.setSelected(elem.isLabelOnRight());
        ElemBackColor.setSelected(elem.isBackColor());
        LabelCommonColor.setSelected(elem.isLabelCommonColor());
        LabelBold.setSelected(elem.isLabelBold());
        LabelColorVal.setText(""+String.format("%06x",elem.getLabelColor()));
        LabelElemColor.setBackground(new Color(elem.getLabelColor()));
        LabelOnCenter.setSelected(elem.isLabelOnCenter());
        LabelBackColor.setSelected(elem.isLabelBackColor());
        NoEditThere.setSelected(elem.isNoEditThere());
        baseBack = back;
        back = new I_Value<String>() {
            @Override
            public void onEnter(String value) {
                baseBack.onEnter(value);
                if (RepaintEtOnce.isSelected()){
                    if (onClose!=null)
                        onClose.onEnter(value);
                    }
                else
                    baseBack.onEnter(value);
                }
            };
        busy = false;
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        Элемент = new javax.swing.JSeparator();
        ColorVal = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel11 = new javax.swing.JLabel();
        X = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        Y = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        W = new javax.swing.JTextField();
        H = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        ElemColor = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        StringSize = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        FontSize = new javax.swing.JTextField();
        CommonColor = new javax.swing.JCheckBox();
        Bold = new javax.swing.JCheckBox();
        jSeparator3 = new javax.swing.JSeparator();
        DeleteElem = new javax.swing.JButton();
        CopyElem = new javax.swing.JButton();
        MoveDown = new javax.swing.JButton();
        MoveLeft = new javax.swing.JButton();
        MoveStep = new javax.swing.JTextField();
        MoveRight = new javax.swing.JButton();
        MoveUp = new javax.swing.JButton();
        MoveAll = new javax.swing.JCheckBox();
        RepaintEtOnce = new javax.swing.JCheckBox();
        SelecElem = new javax.swing.JButton();
        Step5_25 = new javax.swing.JCheckBox();
        jLabel18 = new javax.swing.JLabel();
        LabelColorVal = new javax.swing.JTextField();
        LabelElemColor = new javax.swing.JButton();
        LabelCommonColor = new javax.swing.JCheckBox();
        LabelBold = new javax.swing.JCheckBox();
        jLabel19 = new javax.swing.JLabel();
        LabelOnCenter = new javax.swing.JCheckBox();
        OnCenter = new javax.swing.JCheckBox();
        LabelBackColor = new javax.swing.JCheckBox();
        ElemBackColor = new javax.swing.JCheckBox();
        OnRight = new javax.swing.JCheckBox();
        NoEditThere = new javax.swing.JCheckBox();

        jCheckBox1.setText("jCheckBox1");

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(Элемент);
        Элемент.setBounds(10, 65, 770, 0);

        ColorVal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                ColorValKeyPressed(evt);
            }
        });
        getContentPane().add(ColorVal);
        ColorVal.setBounds(300, 95, 60, 25);
        getContentPane().add(jSeparator2);
        jSeparator2.setBounds(20, 125, 760, 10);

        jLabel11.setText("X");
        jLabel11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jLabel11KeyPressed(evt);
            }
        });
        getContentPane().add(jLabel11);
        jLabel11.setBounds(30, 80, 30, 16);

        X.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                XKeyPressed(evt);
            }
        });
        getContentPane().add(X);
        X.setBounds(25, 95, 40, 25);

        jLabel12.setText("Y");
        getContentPane().add(jLabel12);
        jLabel12.setBounds(80, 80, 30, 16);

        Y.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                YKeyPressed(evt);
            }
        });
        getContentPane().add(Y);
        Y.setBounds(70, 95, 40, 25);

        jLabel13.setText("W");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(120, 80, 30, 16);

        W.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                WKeyPressed(evt);
            }
        });
        getContentPane().add(W);
        W.setBounds(120, 95, 40, 25);

        H.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                HKeyPressed(evt);
            }
        });
        getContentPane().add(H);
        H.setBounds(170, 95, 40, 25);

        jLabel10.setText("H");
        getContentPane().add(jLabel10);
        jLabel10.setBounds(170, 80, 30, 16);
        getContentPane().add(ElemColor);
        ElemColor.setBounds(360, 95, 25, 25);
        getContentPane().add(jLabel14);
        jLabel14.setBounds(420, 90, 40, 0);

        StringSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                StringSizeKeyPressed(evt);
            }
        });
        getContentPane().add(StringSize);
        StringSize.setBounds(260, 95, 30, 25);

        jLabel16.setText("Font");
        getContentPane().add(jLabel16);
        jLabel16.setBounds(220, 80, 40, 16);

        jLabel17.setText("В строке");
        getContentPane().add(jLabel17);
        jLabel17.setBounds(260, 80, 70, 16);

        FontSize.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                FontSizeKeyPressed(evt);
            }
        });
        getContentPane().add(FontSize);
        FontSize.setBounds(220, 95, 30, 25);

        CommonColor.setText("Общий");
        CommonColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CommonColorItemStateChanged(evt);
            }
        });
        getContentPane().add(CommonColor);
        CommonColor.setBounds(440, 105, 64, 20);

        Bold.setText("Bold");
        Bold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                BoldItemStateChanged(evt);
            }
        });
        getContentPane().add(Bold);
        Bold.setBounds(390, 105, 50, 20);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        getContentPane().add(jSeparator3);
        jSeparator3.setBounds(790, 20, 10, 130);

        DeleteElem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/remove.png"))); // NOI18N
        DeleteElem.setBorderPainted(false);
        DeleteElem.setContentAreaFilled(false);
        DeleteElem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteElemActionPerformed(evt);
            }
        });
        getContentPane().add(DeleteElem);
        DeleteElem.setBounds(840, 120, 30, 30);

        CopyElem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/add.png"))); // NOI18N
        CopyElem.setBorderPainted(false);
        CopyElem.setContentAreaFilled(false);
        CopyElem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyElemActionPerformed(evt);
            }
        });
        getContentPane().add(CopyElem);
        CopyElem.setBounds(800, 120, 30, 30);

        MoveDown.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/down.png"))); // NOI18N
        MoveDown.setBorderPainted(false);
        MoveDown.setContentAreaFilled(false);
        MoveDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveDownActionPerformed(evt);
            }
        });
        getContentPane().add(MoveDown);
        MoveDown.setBounds(830, 80, 40, 38);

        MoveLeft.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/left.png"))); // NOI18N
        MoveLeft.setBorderPainted(false);
        MoveLeft.setContentAreaFilled(false);
        MoveLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveLeftActionPerformed(evt);
            }
        });
        getContentPane().add(MoveLeft);
        MoveLeft.setBounds(800, 60, 40, 38);

        MoveStep.setText("25");
        MoveStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveStepActionPerformed(evt);
            }
        });
        getContentPane().add(MoveStep);
        MoveStep.setBounds(800, 10, 30, 25);

        MoveRight.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/right.PNG"))); // NOI18N
        MoveRight.setBorderPainted(false);
        MoveRight.setContentAreaFilled(false);
        MoveRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveRightActionPerformed(evt);
            }
        });
        getContentPane().add(MoveRight);
        MoveRight.setBounds(860, 60, 40, 38);

        MoveUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/up.PNG"))); // NOI18N
        MoveUp.setBorderPainted(false);
        MoveUp.setContentAreaFilled(false);
        MoveUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoveUpActionPerformed(evt);
            }
        });
        getContentPane().add(MoveUp);
        MoveUp.setBounds(830, 40, 40, 38);

        MoveAll.setText("Все");
        getContentPane().add(MoveAll);
        MoveAll.setBounds(870, 30, 50, 20);

        RepaintEtOnce.setText("Отображать сразу");
        getContentPane().add(RepaintEtOnce);
        RepaintEtOnce.setBounds(800, 160, 140, 20);

        SelecElem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/arrow.png"))); // NOI18N
        SelecElem.setBorderPainted(false);
        SelecElem.setContentAreaFilled(false);
        SelecElem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelecElemActionPerformed(evt);
            }
        });
        getContentPane().add(SelecElem);
        SelecElem.setBounds(880, 120, 30, 30);

        Step5_25.setSelected(true);
        Step5_25.setText("Шаг 5/25");
        Step5_25.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                Step5_25ItemStateChanged(evt);
            }
        });
        getContentPane().add(Step5_25);
        Step5_25.setBounds(850, 10, 71, 20);

        jLabel18.setText("Надпись");
        getContentPane().add(jLabel18);
        jLabel18.setBounds(510, 80, 80, 16);

        LabelColorVal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LabelColorValKeyPressed(evt);
            }
        });
        getContentPane().add(LabelColorVal);
        LabelColorVal.setBounds(510, 95, 60, 25);
        getContentPane().add(LabelElemColor);
        LabelElemColor.setBounds(570, 95, 25, 25);

        LabelCommonColor.setText("Общий");
        LabelCommonColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LabelCommonColorItemStateChanged(evt);
            }
        });
        LabelCommonColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabelCommonColorActionPerformed(evt);
            }
        });
        getContentPane().add(LabelCommonColor);
        LabelCommonColor.setBounds(720, 105, 64, 20);

        LabelBold.setText("Bold");
        LabelBold.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LabelBoldItemStateChanged(evt);
            }
        });
        getContentPane().add(LabelBold);
        LabelBold.setBounds(600, 105, 50, 20);

        jLabel19.setText("Элемент");
        getContentPane().add(jLabel19);
        jLabel19.setBounds(320, 80, 60, 16);

        LabelOnCenter.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        LabelOnCenter.setText("↔");
        LabelOnCenter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LabelOnCenterItemStateChanged(evt);
            }
        });
        LabelOnCenter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LabelOnCenterActionPerformed(evt);
            }
        });
        getContentPane().add(LabelOnCenter);
        LabelOnCenter.setBounds(600, 85, 44, 20);

        OnCenter.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        OnCenter.setText("↔");
        OnCenter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OnCenterItemStateChanged(evt);
            }
        });
        getContentPane().add(OnCenter);
        OnCenter.setBounds(390, 85, 50, 20);

        LabelBackColor.setText("Фон");
        LabelBackColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                LabelBackColorItemStateChanged(evt);
            }
        });
        getContentPane().add(LabelBackColor);
        LabelBackColor.setBounds(720, 85, 70, 20);

        ElemBackColor.setText("Фон");
        ElemBackColor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ElemBackColorItemStateChanged(evt);
            }
        });
        getContentPane().add(ElemBackColor);
        ElemBackColor.setBounds(440, 85, 60, 20);

        OnRight.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        OnRight.setText("→");
        OnRight.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                OnRightItemStateChanged(evt);
            }
        });
        getContentPane().add(OnRight);
        OnRight.setBounds(650, 85, 50, 20);

        NoEditThere.setText("noEdit");
        NoEditThere.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                NoEditThereItemStateChanged(evt);
            }
        });
        getContentPane().add(NoEditThere);
        NoEditThere.setBounds(650, 105, 57, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeForm();
    }//GEN-LAST:event_formWindowClosing

    private void ColorValKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ColorValKeyPressed
        onColorKeyPressed("color", ColorVal, ElemColor, evt, new I_WizardAction() {
            @Override
            public void onAction(int value) {
                elem.setColor(value);
            }
        });
    }//GEN-LAST:event_ColorValKeyPressed

    private void XKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_XKeyPressed
        onKeyPressed("X", X, evt, new I_WizardAction() {
            @Override
            public void onAction(int value) {
                elem.setX(value);
            }
        });
    }//GEN-LAST:event_XKeyPressed

    private void YKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_YKeyPressed
        onKeyPressed("Y", Y, evt, new I_WizardAction() {
            @Override
            public void onAction(int value) {
                elem.setY(value);
            }
        });
    }//GEN-LAST:event_YKeyPressed

    private void WKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WKeyPressed
        onKeyPressed("W", W, evt, new I_WizardAction() {
            @Override
            public void onAction(int value) {
                elem.setDx(value);
            }
        });
    }//GEN-LAST:event_WKeyPressed

    private void HKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_HKeyPressed
        onKeyPressed("H", H, evt, new I_WizardAction() {
            @Override
            public void onAction(int value) {
                elem.setH(value);
            }
        });
    }//GEN-LAST:event_HKeyPressed

    private void jLabel11KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jLabel11KeyPressed
    }//GEN-LAST:event_jLabel11KeyPressed

    private void StringSizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StringSizeKeyPressed
        onKeyPressed("StringSize", StringSize, evt, new I_WizardAction() {
            @Override
            public void onAction(int value) {
                elem.setStringSize(value);
            }
        });
    }//GEN-LAST:event_StringSizeKeyPressed

    private void FontSizeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FontSizeKeyPressed
        onKeyPressed("FontSize", FontSize, evt, new I_WizardAction() {
            @Override
            public void onAction(int value) {
                elem.setFontSize(value);
            }
        });
    }//GEN-LAST:event_FontSizeKeyPressed

    private void CommonColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CommonColorItemStateChanged
        if (busy)
            return;
        elem.setCommonColor(CommonColor.isSelected());
        back.onEnter("Изменено commonColor: "+elem.isCommonColor());
    }//GEN-LAST:event_CommonColorItemStateChanged

    private void BoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_BoldItemStateChanged
        if (busy)
            return;
        elem.setBold(Bold.isSelected());
        back.onEnter("Изменено bold: "+elem.isBold());
    }//GEN-LAST:event_BoldItemStateChanged

    private void DeleteElemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteElemActionPerformed
        new OK(200,200,"Удалить элемент: "+elem.getFullTitle(), new I_Button() {
            @Override
            public void onPush() {
                Meta2GUIForm form1 = context.getForm();
                Meta2GUIForm form2 = context.getBaseForm();     //
                if (form2!=null)
                    form1 = form2;
                form1.getControls().getList().remove(elem);     // Удалить из списка элементов управления GUI формы
                back.onEnter("Удален "+form1.getTitle()+": "+elem.getFullTitle());
                onClose.onEnter("Удален "+form1.getTitle()+": "+elem.getFullTitle());
                dispose();
                }
            });
    }//GEN-LAST:event_DeleteElemActionPerformed

    private MainBaseFrame getMain(){
        return context==null ? main : context.getMain();
        }

    private void CopyElemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyElemActionPerformed
        new OK(200,200,"Вставить элемент: "+elem.getFullTitle(), new I_Button() {
            @Override
            public void onPush() {
                Meta2GUI copy = null;
                try {
                    copy = elem.getClass().newInstance();       // Клонировать элемент
                } catch (Exception ee){
                    dispose();
                    getMain().popup("Ошибка создания клона для  "+elem.getFullTitle());
                    return;
                    }
                copy.cloneGUIData(elem);                        // Метод клонирования содержимого для GUI
                copy.shift(10,10);
                Meta2GUIForm form1 = context.getForm();
                Meta2GUIForm form2 = context.getBaseForm();     //
                if (form2!=null)
                    form1 = form2;
                form1.getControls().add(copy);                  // Добавить в список элементов управления GUI формы
                onClose.onEnter("Добавлен "+form1.getTitle()+": "+elem.getFullTitle());
                }
            });
        }//GEN-LAST:event_CopyElemActionPerformed
    private int getStep(){
        int step=0;
        try {
            step = Integer.parseInt(MoveStep.getText());
            }catch (Exception ee){
                getMain().popup("Недопустимый формат целого");
                return 0;
                }
        if (step==0){
            getMain().popup("Выберите ненулевое перемещение ");
            return 0;
            }
        return step;
        }
    private void moveY(int step){
        if (!MoveAll.isSelected()){
            elem.setY(elem.getY()+step);
            Y.setText(""+elem.getY());
            back.onEnter("Изменено Y: "+elem.getY());
            onClose.onEnter("");
            }
        else{
            final Meta2GUI view = context.getSelectedView();
            Meta2GUIForm form = context.getBaseForm();
            int num = form.getControls().shift(0,step);
            onClose.onEnter("Переместить все элементы на dy="+step);
            }
        }
    private void moveX(int step){
        if (!MoveAll.isSelected()){
            elem.setX(elem.getX()+step);
            X.setText(""+elem.getX());
            back.onEnter("Изменено X: "+elem.getX());
            onClose.onEnter("");
            }
        else{
            final Meta2GUI view = context.getSelectedView();
            Meta2GUIForm form = context.getBaseForm();
            int num = form.getControls().shift(step,0);
            onClose.onEnter("Переместить все элементы на dx="+step);
            }
        }
    private void MoveDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveDownActionPerformed
        int step = getStep();
        if (step!=0)
            moveY(step);
        }//GEN-LAST:event_MoveDownActionPerformed

    private void MoveLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveLeftActionPerformed
        int step = getStep();
        if (step!=0)
            moveX(-step);
    }//GEN-LAST:event_MoveLeftActionPerformed

    private void MoveRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveRightActionPerformed
        int step = getStep();
        if (step!=0)
            moveX(step);
    }//GEN-LAST:event_MoveRightActionPerformed

    private void MoveUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveUpActionPerformed
        int step = getStep();
        if (step!=0)
            moveY(-step);
    }//GEN-LAST:event_MoveUpActionPerformed

    private void SelecElemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelecElemActionPerformed
        context.getMain().sendEventPanel(EventRuntimeSelected,1,0,"",elem);
        dispose();
    }//GEN-LAST:event_SelecElemActionPerformed

    private void Step5_25ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_Step5_25ItemStateChanged
        MoveStep.setText(Step5_25.isSelected() ? "25" : "5");
    }//GEN-LAST:event_Step5_25ItemStateChanged

    private void LabelColorValKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LabelColorValKeyPressed
        onColorKeyPressed("labelColor", LabelColorVal, LabelElemColor, evt, new I_WizardAction() {
            @Override
            public void onAction(int value) {
                elem.setLabelColor(value);
            }
        });

    }//GEN-LAST:event_LabelColorValKeyPressed

    private void LabelCommonColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LabelCommonColorItemStateChanged
        if (busy)
            return;
        elem.setLabelCommonColor(LabelCommonColor.isSelected());
        back.onEnter("Изменено labelCommonColor: "+elem.isLabelCommonColor());
    }//GEN-LAST:event_LabelCommonColorItemStateChanged

    private void LabelBoldItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LabelBoldItemStateChanged
        if (busy)
            return;
        elem.setLabelBold(LabelBold.isSelected());
        back.onEnter("Изменено labelBold: "+elem.isLabelBold());

    }//GEN-LAST:event_LabelBoldItemStateChanged

    private void LabelOnCenterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LabelOnCenterItemStateChanged
        if (busy)
            return;
        elem.setLabelOnCenter(LabelOnCenter.isSelected());
        back.onEnter("Изменено labelOnCenter: "+elem.isLabelOnCenter());
    }//GEN-LAST:event_LabelOnCenterItemStateChanged

    private void OnCenterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OnCenterItemStateChanged
        if (busy)
            return;
        elem.setOnCenter(OnCenter.isSelected());
        back.onEnter("Изменено OnCenter: "+elem.isOnCenter());
    }//GEN-LAST:event_OnCenterItemStateChanged

    private void LabelBackColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_LabelBackColorItemStateChanged
        if (busy)
            return;
        elem.setLabelBackColor(LabelBackColor.isSelected());
        back.onEnter("Изменено LabelBackColor: "+elem.isLabelBackColor());

    }//GEN-LAST:event_LabelBackColorItemStateChanged

    private void ElemBackColorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ElemBackColorItemStateChanged
        if (busy)
            return;
        elem.setBackColor(ElemBackColor.isSelected());
        back.onEnter("Изменено ElemBackColor: "+elem.isBackColor());
    }//GEN-LAST:event_ElemBackColorItemStateChanged

    private void MoveStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoveStepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MoveStepActionPerformed

    private void LabelOnCenterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabelOnCenterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LabelOnCenterActionPerformed

    private void OnRightItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_OnRightItemStateChanged
        if (busy)
            return;
        elem.setLabelOnRight(OnRight.isSelected());
        back.onEnter("Изменено OnLeft: "+elem.isLabelOnRight());
    }//GEN-LAST:event_OnRightItemStateChanged

    private void LabelCommonColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LabelCommonColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LabelCommonColorActionPerformed

    private void NoEditThereItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_NoEditThereItemStateChanged
        if (busy)
            return;
        elem.setNoEditThere(NoEditThere.isSelected());
        back.onEnter("Изменено noEditThere: "+elem.isNoEditThere());
    }//GEN-LAST:event_NoEditThereItemStateChanged

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox Bold;
    private javax.swing.JTextField ColorVal;
    private javax.swing.JCheckBox CommonColor;
    private javax.swing.JButton CopyElem;
    private javax.swing.JButton DeleteElem;
    private javax.swing.JCheckBox ElemBackColor;
    private javax.swing.JButton ElemColor;
    private javax.swing.JTextField FontSize;
    private javax.swing.JTextField H;
    private javax.swing.JCheckBox LabelBackColor;
    private javax.swing.JCheckBox LabelBold;
    private javax.swing.JTextField LabelColorVal;
    private javax.swing.JCheckBox LabelCommonColor;
    private javax.swing.JButton LabelElemColor;
    private javax.swing.JCheckBox LabelOnCenter;
    private javax.swing.JCheckBox MoveAll;
    private javax.swing.JButton MoveDown;
    private javax.swing.JButton MoveLeft;
    private javax.swing.JButton MoveRight;
    private javax.swing.JTextField MoveStep;
    private javax.swing.JButton MoveUp;
    private javax.swing.JCheckBox NoEditThere;
    private javax.swing.JCheckBox OnCenter;
    private javax.swing.JCheckBox OnRight;
    private javax.swing.JCheckBox RepaintEtOnce;
    private javax.swing.JButton SelecElem;
    private javax.swing.JCheckBox Step5_25;
    private javax.swing.JTextField StringSize;
    private javax.swing.JTextField W;
    private javax.swing.JTextField X;
    private javax.swing.JTextField Y;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator Элемент;
    // End of variables declaration//GEN-END:variables
}
