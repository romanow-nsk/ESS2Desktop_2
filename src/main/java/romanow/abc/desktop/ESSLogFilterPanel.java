/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop;

import romanow.abc.ESS2ExportKotlin;
import romanow.abc.core.DBRequest;
import romanow.abc.core.I_EmptyEvent;
import romanow.abc.core.constants.Values;
import romanow.abc.core.constants.ValuesBase;
import romanow.abc.core.entity.baseentityes.JEmpty;
import romanow.abc.core.entity.subjectarea.WorkSettings;
import retrofit2.Response;
import romanow.abc.core.utils.FileNameExt;
import romanow.abc.core.utils.Pair;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import retrofit2.Call;
import romanow.abc.core.entity.base.StringList;
import romanow.abc.core.entity.baseentityes.JString;

/**
 *
 * @author romanow
 */
public class ESSLogFilterPanel extends ESSBasePanel {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
    private final static int Stepy=25;
    private final static int Stepx=20;
    private final static int NGroup=28;
    private HashMap<String,ESSLogValue> valuesMap = new HashMap<>();
    private ArrayList<JTextField> valueFields = new ArrayList<>();
    private ArrayList<JTextField> timeFields = new ArrayList<>();
    private boolean on=false;
    @Override
    public void refresh() {
        }
    @Override
    public void eventPanel(int code, int par1, long par2, String par3,Object oo) {
        if (code == EventLogFilter) {
            switch (par1) {
                case 0:
                    removeAll();
                    valueFields.clear();
                    valuesMap.clear();
                    timeFields.clear();
                    on=true;
                    main.panelToFront(this);
                    break;
                case 1:
                    removeAll();
                    valuesMap.clear();
                    valueFields.clear();
                    timeFields.clear();
                    on=false;
                    break;
                case 2:
                    if (!on)
                        break;
                    ESSLogValue logValue = (ESSLogValue)oo;
                    ESSLogValue logValue2 = valuesMap.get(logValue.name);
                    if (logValue2!=null){
                        int idx = logValue2.getIdx();
                        logValue.setIdx(idx);
                        valuesMap.remove(logValue2.name);
                        valuesMap.put(logValue.name,logValue);
                        valueFields.get(idx).setText(logValue.value);
                        timeFields.get(idx).setText(logValue.time);
                        }
                    else{
                        int idx = valuesMap.size();
                        logValue.setIdx(idx);
                        valuesMap.put(logValue.name,logValue);
                        int col = idx/NGroup;
                        int row = idx%NGroup;
                        JTextField fld = new JTextField();
                        fld.setText(logValue.name);
                        fld.setBounds(10+col*470,5+row*Stepy,270,25);
                        add(fld);
                        fld = new JTextField();
                        fld.setText(logValue.value);
                        fld.setBounds(280+col*470,5+row*Stepy,80,25);
                        add(fld);
                        valueFields.add(fld);
                        fld = new JTextField();
                        fld.setText(logValue.time);
                        fld.setBounds(365+col*470,5+row*Stepy,100,25);
                        add(fld);
                        timeFields.add(fld);
                    }
                    break;
            }
        }
    }
}
