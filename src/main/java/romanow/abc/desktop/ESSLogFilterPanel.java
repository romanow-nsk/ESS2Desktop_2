/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop;

import romanow.abc.ESS2ExportKotlin;
import romanow.abc.core.DBRequest;
import romanow.abc.core.I_EmptyEvent;
import romanow.abc.core.constants.Values;
import romanow.abc.core.constants.ValuesBase;
import romanow.abc.core.entity.baseentityes.JEmpty;
import romanow.abc.core.entity.subjectarea.WorkSettings;
import retrofit2.Response;
import romanow.abc.core.utils.FileNameExt;
import romanow.abc.core.utils.Pair;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import retrofit2.Call;
import romanow.abc.core.entity.base.StringList;
import romanow.abc.core.entity.baseentityes.JString;

/**
 *
 * @author romanow
 */
public class ESSLogFilterPanel extends ESSBasePanel {
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
    private final static int Stepy=25;
    private final static int Stepx=480;
    private final static int NGroup=27;
    private HashMap<String,ESSLogValue> valuesMap = new HashMap<>();
    private ArrayList<JTextField> valueFields = new ArrayList<>();
    private ArrayList<JTextField> timeFields = new ArrayList<>();
    //private Box base;
    private JPanel base;

    private boolean on=false;
    private MainBaseFrame main0;
    @Override
    public void refresh() {
        }
    public void initPanel(MainBaseFrame main) {
            main0 = main;
            base = new JPanel();
            JScrollPane scroll = new JScrollPane(base);
            GroupLayout layout = new GroupLayout(base);
            base.setLayout(layout);
            layout.setHorizontalGroup(              // Для панелей - из визарда NetBeans
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE));
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE));
            base.setPreferredSize(new Dimension(Client.PanelW, Client.PanelH-20));
            scroll.setViewportView(base);
            scroll.setBounds(0, 0, Client.PanelW, Client.PanelH-30);
            scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
            add(scroll,BorderLayout.CENTER);                // Добавить еще в старое
        }
    @Override
    public void eventPanel(int code, int par1, long par2, String par3,Object oo) {
        if (code == EventLogFilter) {
            switch (par1) {
                case 0:
                    base.removeAll();
                    valueFields.clear();
                    valuesMap.clear();
                    timeFields.clear();
                    on=true;
                    main0.panelToFront(this);
                    break;
                case 1:
                    base.removeAll();
                    valuesMap.clear();
                    valueFields.clear();
                    timeFields.clear();
                    on=false;
                    break;
                case 2:
                    if (!on)
                        break;
                    ESSLogValue logValue = (ESSLogValue)oo;
                    ESSLogValue logValue2 = valuesMap.get(logValue.name);
                    if (logValue2!=null){
                        int idx = logValue2.getIdx();
                        logValue.setIdx(idx);
                        valuesMap.remove(logValue2.name);
                        valuesMap.put(logValue.name,logValue);
                        valueFields.get(idx).setText(logValue.value);
                        timeFields.get(idx).setText(logValue.time);
                        }
                    else{
                        int idx = valuesMap.size();
                        logValue.setIdx(idx);
                        valuesMap.put(logValue.name,logValue);
                        int col = idx/NGroup;
                        int row = idx%NGroup;
                        JTextField fld = new JTextField();
                        fld.setText(logValue.name);
                        int sizeX = 10+(col+1)*Stepx;
                        fld.setBounds(10+col*Stepx,5+row*Stepy,300,25);
                        base.add(fld);
                        fld = new JTextField();
                        fld.setText(logValue.value);
                        fld.setBounds(310+col*Stepx,5+row*Stepy,80,25);
                        base.add(fld);
                        valueFields.add(fld);
                        fld = new JTextField();
                        fld.setText(logValue.time);
                        fld.setBounds(390+col*Stepx,5+row*Stepy,90,25);
                        base.add(fld);
                        timeFields.add(fld);
                        if (sizeX > Client.PanelW)
                            base.setPreferredSize(new Dimension(sizeX,Client.PanelH-20));
                        else
                            base.setPreferredSize(new Dimension(Client.PanelW,Client.PanelH-20));
                        }
                    break;
            }
        }
    }
}
