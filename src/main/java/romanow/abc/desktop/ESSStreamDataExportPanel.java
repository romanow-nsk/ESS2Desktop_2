/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package romanow.abc.desktop;

import retrofit2.Call;
import romanow.abc.core.ErrorList;
import romanow.abc.core.constants.ConstValue;
import romanow.abc.core.constants.Values;
import romanow.abc.core.entity.metadata.StreamDataList;
import romanow.abc.core.entity.metadata.StreamDataValue;
import romanow.abc.core.entity.metadata.StreamRegisterData;
import romanow.abc.core.entity.metadata.StreamRegisterGroup;
import romanow.abc.core.entity.subject2area.ESS2Architecture;
import romanow.abc.core.utils.FileNameExt;
import romanow.abc.core.utils.OwnDateTime;
import romanow.abc.core.utils.Pair;

import java.util.ArrayList;

/**
 *
 * @author Admin
 */
public class ESSStreamDataExportPanel extends javax.swing.JFrame {
    private OwnDateTime time1=new OwnDateTime(false);
    private OwnDateTime time2=new OwnDateTime(false);
    private ESS2Architecture architecture;
    private ESSClient main;
    private ArrayList<ConstValue> modeList;
    private ConstValue selectedMode;
    private ArrayList<StreamDataList> selected = new ArrayList<>();
    
    public ESSStreamDataExportPanel() {
        initComponents();
        setBounds(200,200,600,200);
        setTitle("Экспорт потоковых данных");
        setVisible(true);
        }
    public void init(ESSClient base0, ESS2Architecture arch0) {
        main = base0;
        architecture = arch0;
        modeList = Values.constMap().getGroupList("DataStream");
        StreamType.removeAll();
        for(ConstValue cc : modeList)
            StreamType.add(cc.title());
        StreamRegister.removeAll();
        long ct = System.currentTimeMillis()-3*24*60*60*1000;
        time2=new OwnDateTime();
        time1=new OwnDateTime(ct);
        TIME2.setText(time2.toString2());
        TIME1.setText(time1.toString2());
        }

    private void refreshSelected(){
        SelectedRegister.removeAll();
        for(StreamDataList desc : selected)
            SelectedRegister.add(desc.title);
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        StreamRegister = new java.awt.Choice();
        TIME1 = new javax.swing.JTextField();
        TIME2 = new javax.swing.JTextField();
        SelectionAdd = new javax.swing.JButton();
        StreamType = new java.awt.Choice();
        SetTIME2 = new javax.swing.JButton();
        SetTIME1 = new javax.swing.JButton();
        ExportToExcel = new javax.swing.JButton();
        SelectionRemove = new javax.swing.JButton();
        SelectedRegister = new java.awt.Choice();
        jCheckBox1 = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);
        getContentPane().add(StreamRegister);
        StreamRegister.setBounds(10, 40, 400, 20);

        TIME1.setEnabled(false);
        TIME1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TIME1MouseClicked(evt);
            }
        });
        getContentPane().add(TIME1);
        TIME1.setBounds(60, 110, 160, 25);

        TIME2.setEnabled(false);
        TIME2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TIME2MouseClicked(evt);
            }
        });
        getContentPane().add(TIME2);
        TIME2.setBounds(280, 110, 160, 25);

        SelectionAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/add.png"))); // NOI18N
        SelectionAdd.setBorderPainted(false);
        SelectionAdd.setContentAreaFilled(false);
        SelectionAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectionAddActionPerformed(evt);
            }
        });
        getContentPane().add(SelectionAdd);
        SelectionAdd.setBounds(420, 30, 40, 40);

        StreamType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                StreamTypeItemStateChanged(evt);
            }
        });
        getContentPane().add(StreamType);
        StreamType.setBounds(10, 10, 160, 20);

        SetTIME2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/calendar.png"))); // NOI18N
        SetTIME2.setBorderPainted(false);
        SetTIME2.setContentAreaFilled(false);
        SetTIME2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetTIME2ActionPerformed(evt);
            }
        });
        getContentPane().add(SetTIME2);
        SetTIME2.setBounds(230, 100, 40, 40);

        SetTIME1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/calendar.png"))); // NOI18N
        SetTIME1.setBorderPainted(false);
        SetTIME1.setContentAreaFilled(false);
        SetTIME1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetTIME1ActionPerformed(evt);
            }
        });
        getContentPane().add(SetTIME1);
        SetTIME1.setBounds(10, 100, 40, 40);

        ExportToExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/excel_32.png"))); // NOI18N
        ExportToExcel.setBorderPainted(false);
        ExportToExcel.setContentAreaFilled(false);
        ExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportToExcelActionPerformed(evt);
            }
        });
        getContentPane().add(ExportToExcel);
        ExportToExcel.setBounds(420, 70, 40, 40);

        SelectionRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/remove.png"))); // NOI18N
        SelectionRemove.setBorderPainted(false);
        SelectionRemove.setContentAreaFilled(false);
        SelectionRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectionRemoveActionPerformed(evt);
            }
        });
        getContentPane().add(SelectionRemove);
        SelectionRemove.setBounds(460, 30, 40, 40);
        getContentPane().add(SelectedRegister);
        SelectedRegister.setBounds(10, 70, 400, 20);

        jCheckBox1.setText("один лист");
        getContentPane().add(jCheckBox1);
        jCheckBox1.setBounds(460, 80, 85, 20);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TIME1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TIME1MouseClicked
        new CalendarView("Окончание периода", new I_CalendarTime() {
            @Override
            public void onSelect(OwnDateTime time) {
                time2 = time;
                TIME2.setText(time2.toString2());
            }
        });
    }//GEN-LAST:event_TIME1MouseClicked

    private void TIME2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TIME2MouseClicked
        if (evt.getClickCount()<2) return;
        if (evt.getButton()==1){
            setTime2();
        }
    }//GEN-LAST:event_TIME2MouseClicked

    private void SelectionAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectionAddActionPerformed
        StreamDataList dd = new StreamDataList(selectedMode.value(),StreamRegister.getSelectedIndex(),StreamRegister.getSelectedItem());
        for(StreamDataList vv : selected){
            if (vv.mode==dd.mode && vv.regIndex==dd.regIndex){
                System.out.println("Повторный выбор регистра");
                return;
                }
            }
        selected.add(dd);
        refreshSelected();
    }//GEN-LAST:event_SelectionAddActionPerformed

    private void StreamTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_StreamTypeItemStateChanged
        int idx = StreamType.getSelectedIndex();
        selectedMode = modeList.get(idx);
        StreamRegister.removeAll();
        if (selectedMode.value()==Values.DataStreamNone){
            return;
            }
        ArrayList<StreamRegisterGroup> list = architecture.getStreamRegisterList(selectedMode.value());
        for(StreamRegisterGroup group : list)
        for(StreamRegisterData registerData : group.getList()){
            registerData.setUnitIdx(group.getLogUnit());
            StreamRegister.add(registerData.getTitle());
            }
        //refreshDataSet();
    }//GEN-LAST:event_StreamTypeItemStateChanged


    private String loadData(StreamDataList desc){
        desc.setSuccess(false);
        String res = new APICall3<ArrayList<StreamDataValue>>(){
            @Override
            public Call<ArrayList<StreamDataValue>> apiFun() {
                return main.service2.getStreamData(main.getDebugToken(),selectedMode.value(),StreamRegister.getSelectedIndex(),time1.timeInMS(),time2.timeInMS());
            }
            @Override
            public void onSucess(ArrayList<StreamDataValue> oo) {
                desc.setData(oo);
                desc.setSuccess(true);
                System.out.println("Прочитаны ПД: "+desc.title);
                }
        }.call(main);
        return  res;
    }

    /*
    private void refreshDataSet() {
        if (DataSetList.getItemCount() == 0)
            return;
        StreamDataValue value = data.getValueList().get(DataSetList.getSelectedIndex());
        new APICall<DBRequest>(main) {
            @Override
            public Call<DBRequest> apiFun() {
                return main.getService().getEntity(main.getDebugToken(), "ArchStreamDataSet", value.setOid, 0);
            }

            @Override
            public void onSucess(DBRequest oo) {
                try {
                    ArchStreamDataSet set = (ArchStreamDataSet) oo.get(main.gson);
                    Meta2Register register = data.getRegister();
                    Pair<String, Integer> value = set.getValue(data.getStreamDataOffset(), register.savedDoubleSize() ? 4 : 2);
                    if (value.o1 != null) {
                        System.out.println(value.o1);
                    }
                    DataValueSet.setText(register.wordToString(value.o2.intValue()));
                    DataValueAPI.setText(String.format("%8x", value.o2.intValue()));
                    int v1 = set.getPackedByteSize();
                    int v2 = set.getSourceByteSize();
                    StreamDataOffset.setText("" + data.getStreamDataOffset());
                    DataPackedSize.setText("" + v1);
                    DataSourceSize.setText("" + v2);
                    DataPackedProc.setText("" + v1 * 100 / v2);
                    DataCompressMode.setText(compressModes.get(set.getCompressMode()).title());
                } catch (UniException e) {
                    System.out.println(e.toString());
                    }
                }
            };
        }

     */
    private void setTime1(){
        new CalendarView("Начало периода", new I_CalendarTime() {
            @Override
            public void onSelect(OwnDateTime time) {
                time1 = time;
                TIME1.setText(time1.toString2());
            }
        });
    }

    private void setTime2(){
        new CalendarView("Начало периода", new I_CalendarTime() {
            @Override
            public void onSelect(OwnDateTime time) {
                time2 = time;
                TIME2.setText(time2.toString2());
            }
        });
    }
    private void SetTIME2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetTIME2ActionPerformed
        setTime2();
    }//GEN-LAST:event_SetTIME2ActionPerformed

    private void SetTIME1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetTIME1ActionPerformed
        setTime1();
    }//GEN-LAST:event_SetTIME1ActionPerformed

    private void ExportToExcelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportToExcelActionPerformed
        for(StreamDataList desc : selected)
            loadData(desc);
        ErrorList errors = new ErrorList();
        FileNameExt ext = main.getOutputFileName("Экспорт потоковых данных","xlsx","Потоковые данные");
        ESSStreamDataExport.exportToXLS(ext.fullName(),errors,selected,true);
        System.out.println(errors.toString());
        dispose();
    }//GEN-LAST:event_ExportToExcelActionPerformed

    private void SelectionRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectionRemoveActionPerformed
        selected.remove(SelectedRegister.getSelectedIndex());
        refreshSelected();
    }//GEN-LAST:event_SelectionRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ESSStreamDataExportPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ESSStreamDataExportPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ESSStreamDataExportPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ESSStreamDataExportPanel.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ESSStreamDataExportPanel().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExportToExcel;
    private java.awt.Choice SelectedRegister;
    private javax.swing.JButton SelectionAdd;
    private javax.swing.JButton SelectionRemove;
    private javax.swing.JButton SetTIME1;
    private javax.swing.JButton SetTIME2;
    private java.awt.Choice StreamRegister;
    private java.awt.Choice StreamType;
    private javax.swing.JTextField TIME1;
    private javax.swing.JTextField TIME2;
    private javax.swing.JCheckBox jCheckBox1;
    // End of variables declaration//GEN-END:variables
}
