/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;


import romanow.abc.core.DBRequest;
import romanow.abc.core.ErrorList;
import romanow.abc.core.UniException;
import romanow.abc.core.constants.ConstValue;
import romanow.abc.core.constants.Values;
import romanow.abc.core.entity.baseentityes.JBoolean;
import romanow.abc.core.entity.baseentityes.JEmpty;
import romanow.abc.core.entity.metadata.Meta2Register;
import romanow.abc.core.entity.metadata.StreamDataValue;
import romanow.abc.core.entity.metadata.StreamRegisterData;
import romanow.abc.core.entity.metadata.StreamRegisterGroup;
import romanow.abc.core.entity.subject2area.ESS2Architecture;
import romanow.abc.core.entity.subjectarea.ArchStreamDataSet;
import romanow.abc.core.entity.subjectarea.DataSet;
import romanow.abc.core.entity.subjectarea.ESSNode;
import romanow.abc.core.entity.subjectarea.MetaDataRegister;
import romanow.abc.core.utils.OwnDateTime;
import retrofit2.Call;
import romanow.abc.core.utils.Pair;

/**
 *
 * @author romanow
 */
public class ESSStreamDataSelector extends javax.swing.JPanel {
    private boolean withError=true;
    private OwnDateTime time1=new OwnDateTime(false);
    private OwnDateTime time2=new OwnDateTime(false);
    private ESS2Architecture architecture;
    private StreamRegisterData data = null;
    private ESSClient main;
    private I_Value<StreamRegisterData> back;
    private ArrayList<ConstValue> modeList;
    private ConstValue selectedMode;
    private HashMap<Integer,ConstValue> compressModes;
    /**
     * Creates new form ESSStreamDataSelector
     */
    public ESSStreamDataSelector(){
        initComponents();
        }
    public void init(ESSClient base0, ESS2Architecture arch0, I_Value<StreamRegisterData> back0) {
        back = back0;
        main = base0;
        architecture = arch0;
        modeList = Values.constMap().getGroupList("DataStream");
        StreamType.removeAll();
        for(ConstValue cc : modeList)
            StreamType.add(cc.title());
        StreamRegister.removeAll();
        compressModes = Values.constMap().getGroupMapByValue("CompressMode");
        long ct = System.currentTimeMillis()-3*24*60*60*1000;
        TIME2.setText(new OwnDateTime().toString2());
        TIME1.setText(new OwnDateTime(ct).toString2());
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        StreamRegister = new java.awt.Choice();
        TIME1 = new javax.swing.JTextField();
        TIME2 = new javax.swing.JTextField();
        ShowGraph = new javax.swing.JButton();
        StreamType = new java.awt.Choice();
        DataSetList = new java.awt.Choice();
        DataSourceSize = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        StreamDataOffset = new javax.swing.JTextField();
        DataValueAPI = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        DataPackedSize = new javax.swing.JTextField();
        DataPackedProc = new javax.swing.JTextField();
        DataCompressMode = new javax.swing.JTextField();
        DataValueSet = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        ShowData = new javax.swing.JButton();
        RemoveData = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        SetTIME2 = new javax.swing.JButton();
        SetTIME1 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setLayout(null);
        add(StreamRegister);
        StreamRegister.setBounds(10, 40, 400, 20);

        TIME1.setEnabled(false);
        TIME1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TIME1MouseClicked(evt);
            }
        });
        add(TIME1);
        TIME1.setBounds(100, 70, 160, 25);

        TIME2.setEnabled(false);
        TIME2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TIME2MouseClicked(evt);
            }
        });
        add(TIME2);
        TIME2.setBounds(320, 70, 160, 25);

        ShowGraph.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/statistic.png"))); // NOI18N
        ShowGraph.setBorderPainted(false);
        ShowGraph.setContentAreaFilled(false);
        ShowGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowGraphActionPerformed(evt);
            }
        });
        add(ShowGraph);
        ShowGraph.setBounds(420, 25, 40, 40);

        StreamType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                StreamTypeItemStateChanged(evt);
            }
        });
        add(StreamType);
        StreamType.setBounds(10, 10, 160, 20);

        DataSetList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DataSetListItemStateChanged(evt);
            }
        });
        add(DataSetList);
        DataSetList.setBounds(10, 105, 220, 20);

        DataSourceSize.setEnabled(false);
        add(DataSourceSize);
        DataSourceSize.setBounds(10, 150, 70, 25);

        jLabel4.setText("hex");
        add(jLabel4);
        jLabel4.setBounds(440, 100, 40, 16);

        StreamDataOffset.setEnabled(false);
        add(StreamDataOffset);
        StreamDataOffset.setBounds(410, 150, 70, 25);

        DataValueAPI.setEnabled(false);
        add(DataValueAPI);
        DataValueAPI.setBounds(280, 100, 70, 25);

        jLabel5.setText("Смещение");
        add(jLabel5);
        jLabel5.setBounds(410, 130, 70, 16);

        jLabel6.setText("Сжатое (байт)");
        add(jLabel6);
        jLabel6.setBounds(100, 130, 90, 16);

        DataPackedSize.setEnabled(false);
        add(DataPackedSize);
        DataPackedSize.setBounds(100, 150, 70, 25);

        DataPackedProc.setEnabled(false);
        add(DataPackedProc);
        DataPackedProc.setBounds(190, 150, 70, 25);

        DataCompressMode.setEnabled(false);
        add(DataCompressMode);
        DataCompressMode.setBounds(280, 150, 110, 25);

        DataValueSet.setEnabled(false);
        add(DataValueSet);
        DataValueSet.setBounds(360, 100, 70, 25);

        jLabel8.setText("Тип сжатия");
        add(jLabel8);
        jLabel8.setBounds(280, 130, 110, 16);

        jLabel9.setText("Исх (байт)");
        add(jLabel9);
        jLabel9.setBounds(10, 130, 70, 16);

        jLabel10.setText("% сжатия");
        add(jLabel10);
        jLabel10.setBounds(190, 130, 70, 16);

        ShowData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/no_problem.png"))); // NOI18N
        ShowData.setBorderPainted(false);
        ShowData.setContentAreaFilled(false);
        ShowData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowDataActionPerformed(evt);
            }
        });
        add(ShowData);
        ShowData.setBounds(10, 65, 35, 35);

        RemoveData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/remove.png"))); // NOI18N
        RemoveData.setBorderPainted(false);
        RemoveData.setContentAreaFilled(false);
        RemoveData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveDataActionPerformed(evt);
            }
        });
        add(RemoveData);
        RemoveData.setBounds(240, 100, 30, 30);

        jLabel7.setText("dec");
        add(jLabel7);
        jLabel7.setBounds(440, 115, 40, 16);

        SetTIME2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/calendar.png"))); // NOI18N
        SetTIME2.setBorderPainted(false);
        SetTIME2.setContentAreaFilled(false);
        SetTIME2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetTIME2ActionPerformed(evt);
            }
        });
        add(SetTIME2);
        SetTIME2.setBounds(270, 60, 40, 40);

        SetTIME1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/calendar.png"))); // NOI18N
        SetTIME1.setBorderPainted(false);
        SetTIME1.setContentAreaFilled(false);
        SetTIME1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetTIME1ActionPerformed(evt);
            }
        });
        add(SetTIME1);
        SetTIME1.setBounds(50, 60, 40, 40);
    }// </editor-fold>//GEN-END:initComponents


    private void ShowGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowGraphActionPerformed
        showData(true);
    }//GEN-LAST:event_ShowGraphActionPerformed

    private void refreshDataSet(){
        DataPackedSize.setText("");
        DataSourceSize.setText("");
        DataPackedProc.setText("");
        DataValueAPI.setText("");
        DataValueSet.setText("");
        DataCompressMode.setText("");
        if (DataSetList.getItemCount()==0)
            return;
        StreamDataValue value = data.getValueList().get(DataSetList.getSelectedIndex());
        new APICall<DBRequest>(main){
            @Override
            public Call<DBRequest> apiFun() {
                return main.getService().getEntity(main.getDebugToken(),"ArchStreamDataSet",value.setOid,0);
                }
            @Override
            public void onSucess(DBRequest oo) {
                try {
                    ArchStreamDataSet set  = (ArchStreamDataSet) oo.get(main.gson);
                    Meta2Register register = data.getRegister();
                    Pair<String,Integer> value = set.getValue(data.getStreamDataOffset(),register.savedDoubleSize() ? 4 : 2);
                    if (value.o1!=null){
                        System.out.println(value.o1);
                        }
                    DataValueSet.setText(register.wordToString(value.o2.intValue()));
                    DataValueAPI.setText(String.format("%8x",value.o2.intValue()));
                    int v1 = set.getPackedByteSize();
                    int v2 = set.getSourceByteSize();
                    StreamDataOffset.setText(""+data.getStreamDataOffset());
                    DataPackedSize.setText(""+v1);
                    DataSourceSize.setText(""+v2);
                    DataPackedProc.setText(""+v1*100/v2);
                    DataCompressMode.setText(compressModes.get(set.getCompressMode()).title());
                    } catch (UniException e) {
                        System.out.println(e.toString());
                        }
            }
        };

    }

    private void setTime1(){
        new CalendarView("Начало периода", new I_CalendarTime() {
            @Override
            public void onSelect(OwnDateTime time) {
                time1 = time;
                TIME1.setText(time1.toString2());
                }
            });
        }

    private void setTime2(){
        new CalendarView("Начало периода", new I_CalendarTime() {
            @Override
            public void onSelect(OwnDateTime time) {
                time2 = time;
                TIME2.setText(time2.toString2());
            }
        });
    }

    private void TIME1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TIME1MouseClicked
        new CalendarView("Окончание периода", new I_CalendarTime() {
            @Override
            public void onSelect(OwnDateTime time) {
                time2 = time;
                TIME2.setText(time2.toString2());
            }
        });
    }//GEN-LAST:event_TIME1MouseClicked

    private void TIME2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TIME2MouseClicked
        if (evt.getClickCount()<2) return;
        if (evt.getButton()==1){
            setTime2();
        }
    }//GEN-LAST:event_TIME2MouseClicked

    private void StreamTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_StreamTypeItemStateChanged
        int idx = StreamType.getSelectedIndex();
        selectedMode = modeList.get(idx);
        StreamRegister.removeAll();
        if (selectedMode.value()==Values.DataStreamNone){
            return;
            }
        ArrayList<StreamRegisterGroup> list = architecture.getStreamRegisterList(selectedMode.value());
        for(StreamRegisterGroup group : list)
            for(StreamRegisterData registerData : group.getList()){
                registerData.setUnitIdx(group.getLogUnit());
                StreamRegister.add(registerData.getTitle());
            }
        refreshDataSet();
    }//GEN-LAST:event_StreamTypeItemStateChanged

    private void DataSetListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DataSetListItemStateChanged
        refreshDataSet();
    }//GEN-LAST:event_DataSetListItemStateChanged

    private String showData2(boolean graph){
        String res = new APICall3<Pair<ErrorList,ArrayList<StreamDataValue>>>(){
            @Override
            public Call<Pair<ErrorList,ArrayList<StreamDataValue>>> apiFun() {
                return main.service2.getStreamData2(main.getDebugToken(),selectedMode.value(),StreamRegister.getSelectedIndex(),time1.timeInMS(),time2.timeInMS());
                }
            @Override
            public void onSucess(Pair<ErrorList,ArrayList<StreamDataValue>> ans) {
                ErrorList errors = ans.o1;
                if (!errors.valid())
                    System.out.print(errors);
                data.setValueList(ans.o2);
                if (graph)
                    back.onEnter(data);
                else {
                    DataSetList.removeAll();
                    for(StreamDataValue vv : ans.o2){
                        DataSetList.add("["+vv.setOid+"] "+new OwnDateTime(vv.timeStamp).toString2());
                        }
                    refreshDataSet();
                    }
                }
            }.call(main);
        return res;
        }
    private String showData1(boolean graph){
        String res = new APICall3<ArrayList<StreamDataValue>>(){
            @Override
            public Call<ArrayList<StreamDataValue>> apiFun() {
                return main.service2.getStreamData(main.getDebugToken(),selectedMode.value(),StreamRegister.getSelectedIndex(),time1.timeInMS(),time2.timeInMS());
                }
            @Override
            public void onSucess(ArrayList<StreamDataValue> oo) {
                data.setValueList(oo);
                if (graph)
                    back.onEnter(data);
                else {
                    DataSetList.removeAll();
                    for(StreamDataValue vv : oo){
                        DataSetList.add("["+vv.setOid+"] "+new OwnDateTime(vv.timeStamp).toString2());
                        }
                    refreshDataSet();
                    }
                }
            }.call(main);
        return  res;
        }

        private void showData(boolean graph){
        if (StreamRegister.getItemCount()==0)
            return;
        final  int logNum = StreamRegister.getSelectedIndex();
        data = architecture.getStreamRegisterByLogNum(selectedMode.value(),logNum);
        StreamDataOffset.setText(""+data.getRegOffset());
        if (data==null)
            return;
        String ss = showData2(graph);
        if (ss !=null){
            if (ss.indexOf("404")!=-1) {
                ss = showData1(graph);
                if (ss!=null)
                    System.out.println(ss);
                }
            else
                System.out.println(ss);
            }
        }

    private void ShowDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowDataActionPerformed
        showData(false);
    }//GEN-LAST:event_ShowDataActionPerformed

    private void RemoveDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveDataActionPerformed
        if (DataSetList.getItemCount()==0)
            return;
        StreamDataValue value = data.getValueList().get(DataSetList.getSelectedIndex());
        new OK(400, 300, "Удалить: setOid=" + value.setOid + " ?", new I_Button() {
            @Override
            public void onPush() {
                new APICall<JBoolean>(main) {
                    @Override
                    public Call<JBoolean> apiFun() {
                        return main.getService().removeEntity(main.getDebugToken(),"ArchStreamDataSet",value.setOid);
                        }
                    @Override
                    public void onSucess(JBoolean oo) {
                        if (oo.value()){
                            int idx = DataSetList.getSelectedIndex();
                            data.getValueList().remove(idx);
                            DataSetList.remove(idx);
                            if (idx!=0)
                                DataSetList.select(idx-1);
                            refreshDataSet();
                        }
                    }
                };
            }
        });
    }//GEN-LAST:event_RemoveDataActionPerformed

    private void SetTIME2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetTIME2ActionPerformed
        setTime2();
    }//GEN-LAST:event_SetTIME2ActionPerformed

    private void SetTIME1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetTIME1ActionPerformed
        setTime1();
    }//GEN-LAST:event_SetTIME1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DataCompressMode;
    private javax.swing.JTextField DataPackedProc;
    private javax.swing.JTextField DataPackedSize;
    private java.awt.Choice DataSetList;
    private javax.swing.JTextField DataSourceSize;
    private javax.swing.JTextField DataValueAPI;
    private javax.swing.JTextField DataValueSet;
    private javax.swing.JButton RemoveData;
    private javax.swing.JButton SetTIME1;
    private javax.swing.JButton SetTIME2;
    private javax.swing.JButton ShowData;
    private javax.swing.JButton ShowGraph;
    private javax.swing.JTextField StreamDataOffset;
    private java.awt.Choice StreamRegister;
    private java.awt.Choice StreamType;
    private javax.swing.JTextField TIME1;
    private javax.swing.JTextField TIME2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    // End of variables declaration//GEN-END:variables
}
