/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package romanow.abc.desktop;

import romanow.abc.core.API.RestAPIBase;
import romanow.abc.core.DBRequest;
import romanow.abc.core.UniException;
import romanow.abc.core.constants.Values;
import romanow.abc.core.entity.Entity;
import romanow.abc.core.entity.EntityList;
import romanow.abc.core.entity.baseentityes.JBoolean;
import romanow.abc.core.entity.baseentityes.JEmpty;
import romanow.abc.core.entity.baseentityes.JLong;
import romanow.abc.core.entity.subjectarea.ArchStreamDataSet;
import romanow.abc.core.entity.subjectarea.ArchStreamPeriod;
import romanow.abc.core.entity.subjectarea.ESSNode;
import romanow.abc.core.entity.subjectarea.MetaDataRegister;
import romanow.abc.core.entity.users.Account;
import romanow.abc.core.entity.users.User;
import romanow.abc.core.utils.OwnDateTime;
import romanow.abc.core.utils.Pair;
import retrofit2.Call;

import java.io.IOException;
import java.util.ArrayList;

/**
 *
 * @author romanow
 */
public class ESSMainServerPanel extends BasePanel {
    private ESSNode  selected = null;
    private EntityList<ArchStreamPeriod> periods = new EntityList<>();
    private ArchStreamPeriod period = null;
    private ArchStreamDataSet set = null;
    private ESSClient main(){
        return (ESSClient)main;
        }

    private void refreshList(final int idx){
        new APICall<ArrayList<DBRequest>>(main){
            @Override
            public Call<ArrayList<DBRequest>> apiFun() {
                return main.service.getEntityList(main.debugToken,"ESSNode", Values.GetAllModeActual,1);
            }
            @Override
            public void onSucess(ArrayList<DBRequest> oo) {
                main().nodes.clear();
                ESSNode.removeAll();
                for(DBRequest rr : oo) {
                    try {
                        ESSNode node = (ESSNode) rr.get(main.gson);
                        ESSNode.add(node.getHostName());
                        main().nodes.add(node);
                    } catch (Exception ee){
                        popup(ee.toString());
                    }
                selected=null;
                if (idx<main().nodes.size()){
                    ESSNode.select(idx);
                    selected = main().nodes.get(idx);
                    refresh();
                    }
                }
            }
        };
    }


    public ESSMainServerPanel() {
        initComponents();
        }
    public void initPanel(MainBaseFrame main0){
        super.initPanel(main0);
        refreshList(0);
        }

    public boolean isMainMode(){ return true; }
    public boolean isESSMode(){ return false; }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        ESSNode = new java.awt.Choice();
        IP = new javax.swing.JTextField();
        ESSType = new javax.swing.JTextField();
        Test = new javax.swing.JButton();
        Add = new javax.swing.JButton();
        Remove = new javax.swing.JButton();
        Title = new javax.swing.JTextField();
        Port = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Working = new javax.swing.JCheckBox();
        StateTestTime = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Login = new javax.swing.JButton();
        InnerIP = new javax.swing.JTextField();
        InnerPort = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        Внешний = new javax.swing.JLabel();
        Внешний1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        InnerWorking = new javax.swing.JCheckBox();
        InnerTestTime = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        Refresh = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        Connect = new javax.swing.JCheckBox();

        jLabel1.setText("jLabel1");

        jLabel11.setText("jLabel11");

        jLabel12.setText("jLabel12");

        setLayout(null);

        ESSNode.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ESSNodeItemStateChanged(evt);
            }
        });
        add(ESSNode);
        ESSNode.setBounds(30, 20, 340, 20);

        IP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                IPKeyPressed(evt);
            }
        });
        add(IP);
        IP.setBounds(100, 50, 160, 25);

        ESSType.setEnabled(false);
        add(ESSType);
        ESSType.setBounds(70, 120, 340, 25);

        Test.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/no_problem.png"))); // NOI18N
        Test.setBorderPainted(false);
        Test.setContentAreaFilled(false);
        Test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestActionPerformed(evt);
            }
        });
        add(Test);
        Test.setBounds(420, 150, 30, 30);

        Add.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/add.png"))); // NOI18N
        Add.setBorderPainted(false);
        Add.setContentAreaFilled(false);
        Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddActionPerformed(evt);
            }
        });
        add(Add);
        Add.setBounds(380, 50, 30, 30);

        Remove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/remove.png"))); // NOI18N
        Remove.setBorderPainted(false);
        Remove.setContentAreaFilled(false);
        Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveActionPerformed(evt);
            }
        });
        add(Remove);
        Remove.setBounds(420, 50, 30, 30);

        Title.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TitleKeyPressed(evt);
            }
        });
        add(Title);
        Title.setBounds(70, 90, 340, 25);

        Port.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PortKeyPressed(evt);
            }
        });
        add(Port);
        Port.setBounds(320, 50, 50, 25);

        jLabel2.setText("Port");
        add(jLabel2);
        jLabel2.setBounds(280, 55, 30, 14);

        jLabel3.setText("Проверка");
        add(jLabel3);
        jLabel3.setBounds(190, 160, 60, 14);

        jLabel4.setText("IP");
        add(jLabel4);
        jLabel4.setBounds(80, 55, 20, 14);

        jLabel5.setText("СНЭ");
        add(jLabel5);
        jLabel5.setBounds(30, 100, 30, 14);

        Working.setText("Включен");
        Working.setEnabled(false);
        add(Working);
        Working.setBounds(100, 150, 90, 23);

        StateTestTime.setEnabled(false);
        add(StateTestTime);
        StateTestTime.setBounds(260, 150, 150, 25);

        jLabel6.setText("Тип");
        add(jLabel6);
        jLabel6.setBounds(30, 130, 30, 14);

        Login.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/login.png"))); // NOI18N
        Login.setBorderPainted(false);
        Login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginActionPerformed(evt);
            }
        });
        add(Login);
        Login.setBounds(380, 10, 30, 30);

        InnerIP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                InnerIPKeyPressed(evt);
            }
        });
        add(InnerIP);
        InnerIP.setBounds(100, 190, 160, 25);

        InnerPort.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                InnerPortKeyPressed(evt);
            }
        });
        add(InnerPort);
        InnerPort.setBounds(320, 190, 60, 25);

        jLabel7.setText("Port");
        add(jLabel7);
        jLabel7.setBounds(280, 195, 30, 14);

        jLabel8.setText("IP");
        add(jLabel8);
        jLabel8.setBounds(80, 195, 20, 14);

        Внешний.setText("Внутр.");
        add(Внешний);
        Внешний.setBounds(10, 195, 50, 14);

        Внешний1.setText("Внешний");
        add(Внешний1);
        Внешний1.setBounds(10, 55, 50, 14);

        jLabel9.setText("Проверка");
        add(jLabel9);
        jLabel9.setBounds(190, 230, 70, 10);

        InnerWorking.setText("Включен");
        InnerWorking.setEnabled(false);
        add(InnerWorking);
        InnerWorking.setBounds(100, 220, 90, 23);

        InnerTestTime.setEnabled(false);
        add(InnerTestTime);
        InnerTestTime.setBounds(260, 230, 150, 25);
        add(jSeparator1);
        jSeparator1.setBounds(0, 180, 410, 10);

        Refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/drawable/refresh.png"))); // NOI18N
        Refresh.setBorderPainted(false);
        Refresh.setContentAreaFilled(false);
        Refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshActionPerformed(evt);
            }
        });
        add(Refresh);
        Refresh.setBounds(420, 220, 30, 30);
        add(jSeparator2);
        jSeparator2.setBounds(10, 260, 440, 2);

        Connect.setText("Связь");
        Connect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ConnectItemStateChanged(evt);
            }
        });
        add(Connect);
        Connect.setBounds(10, 220, 80, 23);
    }// </editor-fold>//GEN-END:initComponents

    private void ESSNodeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ESSNodeItemStateChanged
        IP.setText("");
        Port.setText("");
        if (main().nodes.size()==0) return;
        selected = main().nodes.get(ESSNode.getSelectedIndex());
        refresh();
    }//GEN-LAST:event_ESSNodeItemStateChanged

    private void TestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestActionPerformed
        Pair<RestAPIBase,User> res = loginToSelected();
        popup("Соединение протестировано "+selected.getServerIP()+":"+selected.getServerPort());
        if (res==null)
            return;
        refresh();
        try {
            new APICall2<JEmpty>(){
                @Override
                public Call<JEmpty> apiFun() {
                    return res.o1.logoff(res.o2.getSessionToken());
                    }
               }.call(main);
            } catch (UniException ee){
                popup(""+ee.toString());
                }
    }//GEN-LAST:event_TestActionPerformed

    private void AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddActionPerformed
        new OK(200,200,"Дабавить узел СНЭ",new I_Button() {
            @Override
            public void onPush() {
                new APICall<JLong>(main) {
                    @Override
                    public Call<JLong> apiFun() {
                        return main.service.addEntity(main.debugToken, new DBRequest(new ESSNode(),main.gson),0);
                        }
                    @Override
                    public void onSucess(JLong oo) {
                        refreshList(main().nodes.size());
                    }
                };
            }
        });
    }//GEN-LAST:event_AddActionPerformed

    private void RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveActionPerformed
        if (selected==null)
        return;
        new OK(200,200,"Удалить узел СНЭ",new I_Button() {
            @Override
            public void onPush() {

                new APICall<JBoolean>(main) {
                    @Override
                    public Call<JBoolean> apiFun() {
                        return main.service.removeEntity(main.debugToken, "ESSNode",selected.getOid());
                        }
                    @Override
                    public void onSucess(JBoolean oo) {
                        refreshList(0);
                    }
                };
            }
        });
    }//GEN-LAST:event_RemoveActionPerformed

    private void updateSelected(){
        if (selected==null)
            return;
        new APICall<JEmpty>(main) {
            @Override
            public Call<JEmpty> apiFun() {
                return main.service.updateEntity(main.debugToken, new DBRequest(selected,main.gson));
                }
            @Override
            public void onSucess(JEmpty oo) {
                refreshList(ESSNode.getSelectedIndex());
            }
        };
    }
    
    private void setWorking(boolean working){
        selected.setWorking(working);
        selected.setStateTestTime(new OwnDateTime());
        try {
            new APICall2<JEmpty>() {
                @Override
                public Call<JEmpty> apiFun() {
                return main.service.updateEntityField(main.debugToken,"working",new DBRequest(selected,main.gson));
                    }
                }.call(main);
            new APICall2<JEmpty>() {
                @Override
                public Call<JEmpty> apiFun() {
                    return main.service.updateEntityField(main.debugToken,"stateTestTime",new DBRequest(selected,main.gson));
                    }
                }.call(main);
            }catch (UniException ee){
                popup("Ошибка обновления "+selected.getHostName()+" "+ee.toString());
                }
            }

    private Pair<RestAPIBase,User> loginToSelected(){
        Account account;
        Pair<RestAPIBase,String> res;
        if (selected==null)
            return null;
        try {
            account = new APICall2<Account>(){
                @Override
                public Call<Account> apiFun() {
                return main.service.getOwnAccount(main.debugToken);
                    }
                }.call(main);
            res = main.startOneClient(selected.getServerIP(),""+selected.getServerPort());
            setWorking(true);
            } catch (UniException e) {
                popup("Ошибка соединения с "+selected.getServerIP()+":"+selected.getServerPort());
                setWorking(false);
                return null;
                }
        try {
            User user = new APICall2<User>(){
                @Override
                public Call<User> apiFun() {
                return res.o1.login(account.getLoginPhone(),account.getPassword());
                    }
                }.call(main);
            return new Pair<RestAPIBase,User>(res.o1,user);   // Взять токен из данных авторизации
            } catch (UniException e) {
                popup("Ошибка соединения с "+selected.getServerIP()+":"+selected.getServerPort());
                setWorking(false);
                return null;
                }
        }

    private I_OK backToMainServer = new I_OK() {
        @Override
        public void onOK(Entity ent) {
            main.restoreContext();
            main.setVisible(true);
            }
        };

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed
        final Pair<RestAPIBase,User> res = loginToSelected();
        if (res==null)
            return;
        refresh();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Client(res.o1, res.o2,backToMainServer).setVisible(true);
                    main.setVisible(false);
                    } catch (UniException ee){
                        popup("Вход в сервер СМУ СНЭ: "+ee.toString());
                        }
                }
            });
    }//GEN-LAST:event_LoginActionPerformed

    private void RefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshActionPerformed
        refreshList(ESSNode.getSelectedIndex());
    }//GEN-LAST:event_RefreshActionPerformed

    private void IPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IPKeyPressed
        if(evt.getKeyCode()!=10) return;
        if (selected==null) return;
        selected.setServerIP(IP.getText());
        main.viewUpdate(evt,true);
        updateSelected();
    }//GEN-LAST:event_IPKeyPressed

    private void PortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PortKeyPressed
        if(evt.getKeyCode()!=10) return;
        if (selected==null) return;
        try {
            selected.setServerPort(Integer.parseInt(Port.getText()));
            main.viewUpdate(evt,true);
            updateSelected();
        } catch (Exception ee){ popup("Недопустимый формат целого"); }
    }//GEN-LAST:event_PortKeyPressed

    private void TitleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TitleKeyPressed
        if(evt.getKeyCode()!=10) return;
        if (selected==null) return;
        selected.setHostName(Title.getText());
        main.viewUpdate(evt,true);
        updateSelected();
    }//GEN-LAST:event_TitleKeyPressed

    private void InnerIPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InnerIPKeyPressed
        if(evt.getKeyCode()!=10) return;
        if (selected==null) return;
        selected.setInnerIP(InnerIP.getText());
        main.viewUpdate(evt,true);
        updateSelected();
    }//GEN-LAST:event_InnerIPKeyPressed

    private void InnerPortKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InnerPortKeyPressed
        if(evt.getKeyCode()!=10) return;
        if (selected==null) return;
        try {
            selected.setInnerPort(Integer.parseInt(InnerPort.getText()));
            main.viewUpdate(evt,true);
            updateSelected();
        } catch (Exception ee){ popup("Недопустимый формат целого"); }

    }//GEN-LAST:event_InnerPortKeyPressed

    private void ConnectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ConnectItemStateChanged
        if (selected==null)
            return;
        selected.setConnect(Connect.isSelected());
        try {
            new APICall2<JEmpty>() {
                @Override
                public Call<JEmpty> apiFun() {
                    return main.service.updateEntityField(main.debugToken,"connect",new DBRequest(selected,main.gson));
                }
            }.call(main);
            } catch (UniException e) {
                popup(e.toString());
                }

    }//GEN-LAST:event_ConnectItemStateChanged


    @Override
    public void refresh() {
        if (selected==null)
            return;
        Title.setText(selected.getHostName());
        IP.setText(selected.getServerIP());
        Port.setText(""+selected.getServerPort());
        InnerIP.setText(selected.getInnerIP());
        InnerPort.setText(""+selected.getInnerPort());
        OwnDateTime tt = selected.getStateTestTime();
        StateTestTime.setText(!tt.dateTimeValid() ? "" : tt.toString2());
        Working.setSelected(selected.isWorking());
        OwnDateTime tt2 = selected.getInnerTestTime();
        InnerTestTime.setText(!tt2.dateTimeValid() ? "" : tt2.toString2());
        InnerWorking.setSelected(selected.isInnerWorking());
        ESSType.setText(selected.getEssConfigName());
        Connect.setSelected(selected.isConnect());
        }

    @Override
    public void eventPanel(int code, int par1, long par2, String par3,Object oo) {
        if (code==EventRefreshSettings){
            refresh();
            main.sendEventPanel(EventRefreshSettingsDone,0,0,"");
            }
    }

    @Override
    public void shutDown() {

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Add;
    private javax.swing.JCheckBox Connect;
    private java.awt.Choice ESSNode;
    private javax.swing.JTextField ESSType;
    private javax.swing.JTextField IP;
    private javax.swing.JTextField InnerIP;
    private javax.swing.JTextField InnerPort;
    private javax.swing.JTextField InnerTestTime;
    private javax.swing.JCheckBox InnerWorking;
    private javax.swing.JButton Login;
    private javax.swing.JTextField Port;
    private javax.swing.JButton Refresh;
    private javax.swing.JButton Remove;
    private javax.swing.JTextField StateTestTime;
    private javax.swing.JButton Test;
    private javax.swing.JTextField Title;
    private javax.swing.JCheckBox Working;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel Внешний;
    private javax.swing.JLabel Внешний1;
    // End of variables declaration//GEN-END:variables
}
